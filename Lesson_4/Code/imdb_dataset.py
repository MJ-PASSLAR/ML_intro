# -*- coding: utf-8 -*-
"""IMDB_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xbUd1v6hFtuQRIUeF51YJOwsIGJMhCxe
"""

#download dataset
from keras.datasets import imdb

(train_data,train_lable),(test_data,test_lable) = imdb.load_data(num_words=10000)
print(len(train_data))
print(len(train_lable))

print(len(test_data))
print(len(test_lable))

#preparing data
import numpy as np

def vectorize_sequences(sequences, dimension=10000):
	results = np.zeros((len(sequences), dimension))
	for i, sequence in enumerate(sequences):
		results[i, sequence] = 1
	return results
x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

y_train = np.asarray(train_lable).astype('float32')
y_test = np.asarray(test_lable).astype('float32')

#creat and compile yout model
from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop',
							loss='binary_crossentropy',
							metrics=['accuracy'])

x_val = x_train[:10000]
partial_x_train = x_train[10000:]

y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_x_train,
										partial_y_train,
										epochs=20,
										batch_size=512,
										validation_data=(x_val, y_val))

test_loss, test_acc = model.evaluate(x_test, y_test)

#plot loss and accuracy
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']

import matplotlib.pyplot as plt
plt.plot( loss_values, 'bo', label='Training loss')
plt.plot(val_loss_values, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()