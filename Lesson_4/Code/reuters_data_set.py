# -*- coding: utf-8 -*-
"""Reuters Data set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mPKxTkoPvDvJZD5m56GU6_QH8JYdqQPT
"""

#load data set
from keras.datasets import reuters
(train_data,train_labels),(test_data,test_labels) = reuters.load_data(num_words = 10000)

print(len(train_data))
print(len(train_labels))

print(len(test_data))
print(len(test_labels))

#preparing the data
import numpy as np
def vectorze_sequences(sequences,dimention=10000):
    result = np.zeros((len(sequences),dimention))
    for i,sequence in enumerate(sequences):
        result[i,sequence] = 1
    return result
x_train = vectorze_sequences(train_data)
x_test = vectorze_sequences(test_data)

#preparing the labels
def to_one_hot(labels,dimention=46):
    results = np.zeros((len(labels),dimention))
    for i, labels in enumerate(labels):
      results[i,labels]=1
    return results
one_hot_train_labels = to_one_hot(train_labels)
one_hot_test_labels = to_one_hot(test_labels)

#model definitation
from keras import models
from keras import layers
model = models.Sequential()
model.add(layers.Dense(64,activation = 'relu' , input_shape =(10000,)))
model.add(layers.Dense(64,activation = 'relu'))
model.add(layers.Dense(46,activation = 'softmax'))

#compiling the model
model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

#setting aside a validation set
x_val = x_train[:1000]
partial_x_train = x_train[1000:]

y_val = one_hot_train_labels[:1000]
partial_y_train = one_hot_train_labels[1000:]

#Training the model
history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

test_loss, test_acc = model.evaluate(x_test, one_hot_test_labels)

#plotting the training and validation loss
import matplotlib.pyplot as plt
loss = history.history['loss']
val_loss = history.history['val_loss']
plt.plot(loss, 'bo', label='Training loss')
plt.plot(val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()